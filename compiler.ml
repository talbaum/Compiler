#use "code-gen.ml";;

let file_to_string f =
  let ic = open_in f in
  let s = really_input_string ic (in_channel_length ic) in
  close_in ic;
  s;;



let string_to_asts s = List.map Semantics.run_semantics
                         (Tag_Parser.tag_parse_expressions
                            (Reader.read_sexprs s));;

 let primitive_names_to_labels = 
  ["boolean?", "is_boolean"; "float?", "is_float"; "integer?", "is_integer"; "pair?", "is_pair";
   "null?", "is_null"; "char?", "is_char"; "vector?", "is_vector"; "string?", "is_string";
   "procedure?", "is_procedure"; "symbol?", "is_symbol"; "string-length", "string_length";
   "string-ref", "string_ref"; "string-set!", "string_set"; "make-string", "make_string";
   "vector-length", "vector_length"; "vector-ref", "vector_ref"; "vector-set!", "vector_set";
   "make-vector", "make_vector"; "symbol->string", "symbol_to_string"; 
   "char->integer", "char_to_integer"; "integer->char", "integer_to_char"; "eq?", "is_eq";
   "+", "bin_add"; "*", "bin_mul"; "-", "bin_sub"; "/", "bin_div"; "<", "bin_lt"; "=", "bin_equ";
   "car","car_nasm"; "cdr","cdr_nasm"; "set-car!","set_car"; "set-cdr!","set_cdr"; "cons","cons_nasm";
    "apply","apply_nasm" 
(* you can add yours here *)];;


let isEqual_constant e1 e2=
  match e1, e2 with
  |  Void,  Void -> true
  | (Sexpr s1), (Sexpr s2) -> sexpr_eq s1 s2
  | _-> false;;

let rec get_constAddress find_me constant_table = match constant_table with
| [] -> 0
| _ -> let first = List.hd constant_table in
       let (sexpr,address,_) = first in
       if isEqual_constant sexpr find_me then address else get_constAddress  find_me (List.tl constant_table) ;;
       

let rec get_fvarAddress find_me fvar_table = match fvar_table with
| [] -> 0
| _ -> let first = List.hd fvar_table in
       let (fvar_name,address) = first in
       if  fvar_name = find_me then address else get_fvarAddress find_me (List.tl fvar_table) ;;
   
  

let make_prologue consts_tbl fvars_tbl =
  let get_const_address const ="const_tbl+"^(string_of_int(get_constAddress const consts_tbl)) in
  let get_fvar_address const = "fvar_tbl+"^string_of_int(get_fvarAddress const fvars_tbl) in
  let make_primitive_closure (prim, label) =
"    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, " ^ label  ^ ")
    mov [" ^ (get_fvar_address prim)  ^ "*WORD_SIZE], rax" in
  let make_constant (c, a, s) = s in
  
"
;;; All the macros and the scheme-object printing procedure
;;; are defined in compiler.s
%include \"compiler.s\"

section .bss
malloc_pointer:
    resq 1

section .data
const_tbl:
" ^ (String.concat "\n" (List.map make_constant consts_tbl)) ^ "

;;; These macro definitions are required for the primitive
;;; definitions in the epilogue to work properly
%define SOB_VOID_ADDRESS " ^ get_const_address Void ^ "
%define SOB_NIL_ADDRESS " ^ get_const_address (Sexpr Nil) ^ "
%define SOB_FALSE_ADDRESS " ^ get_const_address (Sexpr (Bool false)) ^ "
%define SOB_TRUE_ADDRESS " ^ get_const_address (Sexpr (Bool true)) ^ "

fvar_tbl:
" ^ (String.concat "\n" (List.map (fun _ -> "dq T_UNDEFINED") fvars_tbl)) ^ "

global main
section .text
main:
    ;; set up the heap
    mov rdi, MB(100)
    call malloc
    mov [malloc_pointer], rax

    ;; Set up the dummy activation frame
    ;; The dummy return address is T_UNDEFINED
    ;; (which a is a macro for 0) so that returning
    ;; from the top level (which SHOULD NOT HAPPEN
    ;; AND IS A BUG) will cause a segfault.
    push 0
    push qword SOB_NIL_ADDRESS
    push qword T_UNDEFINED
    push rsp

    call code_fragment
    add rsp, 4*8
    ret

code_fragment:
    ;; Set up the primitive stdlib fvars:
    ;; Since the primtive procedures are defined in assembly,
    ;; they are not generated by scheme (define ...) expressions.
    ;; This is where we emulate the missing (define ...) expressions
    ;; for all the primitive procedures.
" ^ (String.concat "\n" (List.map make_primitive_closure primitive_names_to_labels)) ^"
 
";;

let init_VarTable fvar_tabel = 
List.map (fun(x)->(x))


let epilogue = "


car_nasm:
    push rbp
    mov rbp, rsp
    mov rsi, PVAR(0)
    cmp byte[rsi] , T_PAIR
    jne invalid
    mov rax, qword[rsi+1]
    leave
    ret


cdr_nasm:
    push rbp
    mov rbp, rsp
    mov rsi, PVAR(0)
    cmp byte[rsi] , T_PAIR
    jne invalid
    mov rax, qword[rsi+1+8]
    leave
    ret


set_car:
    push rbp
    mov rbp, rsp
    mov rsi, PVAR(0)
    mov rdi, PVAR(1)
    cmp byte[rsi] , T_PAIR
    jne invalid
    mov qword[rsi+1], rdi
    mov rax, SOB_VOID_ADDRESS
    leave
    ret


set_cdr:
    push rbp
    mov rbp, rsp
    mov rsi, PVAR(0)
    mov rdi, PVAR(1)
    cmp byte[rsi] , T_PAIR
    jne invalid
    mov qword[rsi+1+8], rdi
    mov rax, SOB_VOID_ADDRESS
    leave
    ret


cons_nasm:
    push rbp
    mov rbp, rsp
    mov rsi, PVAR(0)
    mov rdi, PVAR(1)
    mov r8, PVAR(2)
    mov r8, [r8]
    MAKE_PAIR(r8, rsi, rdi)
    mov rax, r8
    leave
    ret


apply_nasm:
    push rbp
    mov rbp, rsp
    mov rsi, PVAR(0)
    mov rsi,[rsi]
    mov rdi, PVAR(1)
        mov rdi,[rdi]
    mov r8, PVAR(2)
    mov r8,[r8]
    mov r13, PVAR(3)
    mov r9, PVAR(4)
    mov rax, r8
    ;push rdi
    ;push rsi
    ;mov rdi,qword [rbp + 8 * 4]  ;proc
    ;mov r8, qword [rbp + 8 * 3]  ;number of arguments
    ;dec r8
    ;mov r11, r8                  ;number of args
    ;chinkush:
    ;mov r8b, byte [rbp + 8 * 5]
    ;mov r8, [r8]
    ;push r8
    ;mov r8b, byte [rbp + 8 * 6]
    ;mov r8, [r8]

    ;push r8
    ;mov r8b, byte [rbp + 8 * 7]
    ;mov r8, [r8]

    ;push r8
    ;jmp loop_apply  
    ;after_loop_apply:
    ;push r11
    ;push rdi
    ;call rdi
    
    ;chinki:
    ;pop rdi
    ;pop rsi
    ;leave
    ;ret


;loop_apply:
;cmp r8, 0
;je after_loop_apply
;mov r9, rbp
;add r9, 24
;mov r9, [r9+r8*WORD_SIZE]
;mov r12, r8

;mulby8:
;cmp r12 ,0
;je after_mul
;add r9, 8
;dec r12
;jmp mulby8


;after_mul:
;mov r9, [r9]
;mov rsi, r9
;push r9
;dec r8
;jmp loop_apply




;
;      %rotate 1
;    %endrep
; TODO 
;%macro apply_nasm 2-*
; %rep %0   ;; %0 is num_of_params maybe do (%0 -1)
;;TODO: body of apply - need to push all args to stack and then call the proc at %1
;%rotate 1
;%endrep
;call %1
;%endmacro

invalid:
  ret
";;
exception X_missing_input_file;;

try
  let infile = Sys.argv.(1) in
  let code =  (*(file_to_string "stdlib.scm") ^*)  (file_to_string infile) in
  let asts = string_to_asts code in
  let consts_tbl = Code_Gen.make_consts_tbl asts in
  let fvars_tbl = Code_Gen.make_fvars_tbl asts in
  let generate = Code_Gen.generate consts_tbl fvars_tbl in
  let code_fragment = String.concat "\n\n"
                        (List.map
                           (fun ast -> (generate ast) ^ "\n    call write_sob_if_not_void")
                           asts) in
  let provided_primitives = file_to_string "prims.s" in
                   
  print_string ((make_prologue consts_tbl fvars_tbl)  ^
                  code_fragment ^ "\n ret \n" ^
                    provided_primitives ^ "\n" ^ epilogue)

with Invalid_argument(x) -> raise X_missing_input_file;;


(**------------------------------------------------------------------------------------------------------- *)



