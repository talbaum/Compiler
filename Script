utop
#use "semantic-analyser.ml";;
open Semantics;;
test "(define x 1)";;
 -------------------------------------------------------------------------------
| Applic' (proc , arg_list) -> 
          let rev = List.rev arg_list in
          let args_text = gen_map rev "\n push rax \n" consts fvars env  counter in
          let post_args = args_text ^ "\n push "^ (string_of_int (List.length arg_list))^" \n" in
          let proc_text = generate_handle consts fvars proc env counter in
          let with_proc = post_args ^ proc_text in
          let assembly_check = 
          "\n 
          cmp byte[rax],  T_CLOSURE
          je Applicexit
          ret
          Applicexit:
          CLOSURE_ENV rcx, rax
          push rcx
          CLOSURE_CODE rax, rax
          call rax
          add rsp, 8*1         ; pop env
          pop rbx ; pop arg count
          shl rbx, 3 ; rbx = rbx * 8
          add rsp, rbx; pop args
          
          " in
          with_proc ^ assembly_check 

