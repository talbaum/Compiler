+let nt_lineComment =
+  let nt_begin = char ';' in
+  let nt_eol = char '\n' in
+  let nt_end = pack nt_end_of_input (fun _ -> '\n') in
+  let nt_eol_end = disj nt_eol nt_end in
+  let nt = diff nt_any nt_eol_end in
+  let nt = caten nt_begin (star nt) in
+  let nt_comment = caten nt nt_eol_end in
+  pack nt_comment (fun (_) -> Nil);;
-----------------------------------------------

set disassembly-flavor intel
set tui border-kind acs
layout asm
tui enable
tui reg general


x/12xg $rsp

 -------------------------------------------------------------------------------
 
 
 let primitive_names_to_labels = 
  ["boolean?", "is_boolean"; "float?", "is_float"; "integer?", "is_integer"; "pair?", "is_pair";
   "null?", "is_null"; "char?", "is_char"; "vector?", "is_vector"; "string?", "is_string";
   "procedure?", "is_procedure"; "symbol?", "is_symbol"; "string-length", "string_length";
   "string-ref", "string_ref"; "string-set!", "string_set"; "make-string", "make_string";
   "vector-length", "vector_length"; "vector-ref", "vector_ref"; "vector-set!", "vector_set";
   "make-vector", "make_vector"; "symbol->string", "symbol_to_string"; 
   "char->integer", "char_to_integer"; "integer->char", "integer_to_char"; "eq?", "is_eq";
   "+", "bin_add"; "*", "bin_mul"; "-", "bin_sub"; "/", "bin_div"; "<", "bin_lt"; "=", "bin_equ";
   "car","car_nasm"; "cdr","cdr_nasm"; "set-car!","set_car"; "set-cdr!","set_cdr"; "cons","cons_nasm";
   "apply","apply_nasm"
(* you can add yours here *)];;
 
 
 
let epilogue = "
; returns the car pointer of the pair SOB which in %1
%macro car_nasm 1
  cmp byte[%1] , T_PAIR
  jne invalid
  mov rax, qword[%1+1]
%endmacro

; returns the cdr pointer of the pair SOB which in %1
%macro cdr_nasm 1
  cmp byte[%1] , T_PAIR
  jne invalid
  mov rax, qword[%1+1+8]
%endmacro

; sets the car pointer of the pair SOB which in %1 to be %2
%macro set_car 2
  cmp byte[%1] , T_PAIR
  jne invalid
  mov qword[%1+1], %2
%endmacro

; sets the cdr pointer of the pair SOB which in %1 to be %2
%macro set_cdr 2
  cmp byte[%1] , T_PAIR
  jne invalid
  mov qword[%1+1+8], %2
%endmacro

; create a SOB of pair with %1 as car and %2 as cdr into register %3
%macro cons_nasm 3
  MAKE_PAIR %3 %1 %2
%endmacro

; TODO 
%macro apply_nasm 2-*
  %rep %0   ;; %0 is num_of_params maybe do (%0 -1)
      ;;TODO: body of apply - need to push all args to stack and then call the proc at %1
%rotate 1
%endrep
call %1
%endmacro

invalid:
  ret
";;
